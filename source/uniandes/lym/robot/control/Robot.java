/* Robot.java */
/* Generated By: Autor&JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.HashMap;

@SuppressWarnings("serial")
public class Robot implements RobotConstants {
    public HashMap<String, Integer > vars = new HashMap<String, Integer >();
    private RobotWorldDec world;
    String salida = new String();

    void setWorld(RobotWorld w) {
        world = (RobotWorldDec) w;
    }
// Ejecutar turn to my
void executeTurnToMy(String dir) {
    if (dir.equalsIgnoreCase("left")) {
        world.turnLeft();
    } else if (dir.equalsIgnoreCase("right")) {
        world.turnRight();
    } else if (dir.equalsIgnoreCase("back")) {
        world.turnBack();
    }
}

// Ejecutar turn to the
void executeTurnToThe(String orient) {
    if (orient.equalsIgnoreCase("north")) {
        world.turnTo(Robotworld.NORTH);
    } else if (orient.equalsIgnoreCase("south")) {
        world.turnTo(Robotworld.SOUTH);
    } else if (orient.equalsIgnoreCase("east")) {
        world.turnTo(Robotworld.EAST);
    } else if (orient.equalsIgnoreCase("west")) {
        world.turnTo(Robotworld.WEST);
    }
  }

  final public String ID() throws ParseException {Token t;
    t = jj_consume_token(ID);
{if ("" != null) return t.image;}
    throw new Error("Missing return statement in function");
}

  final public void execCommand(Console sistema) throws ParseException {
    jj_consume_token(EXEC);
    block(sistema);
sistema.printOutput("Execution block completed.");
}

  final public void defVar() throws ParseException {String name;
    int value;
    jj_consume_token(NEW);
    jj_consume_token(VAR);
    name = ID();
    jj_consume_token(EQUALS);
    value = num();
    jj_consume_token(55);
vars.put(name, value);
}

  final public void defMacro() throws ParseException {String name;
    List<String> params = new LinkedList<>();
    Node blockNode;
    jj_consume_token(NEW);
    jj_consume_token(MACRO);
    name = ID();
    jj_consume_token(56);
    paramList(params);
    jj_consume_token(57);
    block();
macros.put(name, new Macro(params, blockNode));
}

  final public void paramList(List<String> params) throws ParseException {String param;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ID:{
      param = ID();
params.add(param);
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case 58:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(58);
        param = ID();
params.add(param);
      }
      break;
      }
    default:
      jj_la1[1] = jj_gen;
      ;
    }
}

  final public void block(Console sistema) throws ParseException {
    label_2:
    while (true) {
      command(sistema);
      jj_consume_token(55);
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 0:
      case MOV:
      case RIGHT:
      case PUT:
      case PICK:
      case POP:
      case GO:
      case HOP:
      case EXEC:
      case WALK:
      case JUMP:
      case TURNTOMY:
      case TURNTOTHE:{
        ;
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
    }
}

  final public boolean command(Console sistema) throws ParseException {String dir;
    String orient;
    int steps;
    int x, y;
    salida = new String();
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case MOV:
    case RIGHT:
    case PUT:
    case PICK:
    case POP:
    case GO:
    case HOP:
    case EXEC:
    case WALK:
    case JUMP:
    case TURNTOMY:
    case TURNTOTHE:{
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EXEC:{
        execCommand(sistema);
        break;
        }
      case RIGHT:{
        jj_consume_token(RIGHT);
        jj_consume_token(56);
        jj_consume_token(57);
world.turnRight(); salida = "Command: Turn right";
        break;
        }
      case MOV:{
        jj_consume_token(MOV);
        jj_consume_token(56);
        x = num();
        jj_consume_token(57);
world.moveForward(x, false); salida = "Command: Move forward";
        break;
        }
      case HOP:{
        jj_consume_token(HOP);
        jj_consume_token(56);
        x = num();
        jj_consume_token(57);
world.moveForward(x, true); salida = "Command: Jump forward";
        break;
        }
      case TURNTOMY:{
        jj_consume_token(TURNTOMY);
        jj_consume_token(56);
        dir = direction();
        jj_consume_token(57);
executeTurnToMy(dir); salida = "Command: Turn to My " + dir;
        break;
        }
      case TURNTOTHE:{
        jj_consume_token(TURNTOTHE);
        jj_consume_token(56);
        orient = orientation();
        jj_consume_token(57);
executeTurnToThe(orient); salida = "Command: Turn to The " + orient;
        break;
        }
      case WALK:{
        jj_consume_token(WALK);
        jj_consume_token(56);
        steps = num();
        jj_consume_token(57);
world.moveForward(steps, false); salida = "Command: Walk " + steps + " steps forward";
        break;
        }
      case JUMP:{
        jj_consume_token(JUMP);
        jj_consume_token(56);
        steps = num();
        jj_consume_token(57);
world.moveForward(steps, true); salida = "Command: Jump " + steps + " steps forward";
        break;
        }
      case GO:{
        jj_consume_token(GO);
        jj_consume_token(56);
        x = num();
        jj_consume_token(58);
        y = num();
        jj_consume_token(57);
world.setPostion(x, y); salida = "Command: GO";
        break;
        }
      case PUT:{
        jj_consume_token(PUT);
        jj_consume_token(56);
        put();
        jj_consume_token(57);
        break;
        }
      case PICK:{
        jj_consume_token(PICK);
        jj_consume_token(56);
        get();
        jj_consume_token(57);
        break;
        }
      case POP:{
        jj_consume_token(POP);
        jj_consume_token(56);
        x = num();
        jj_consume_token(57);
world.popBalloons(x); salida = "Command: Pop";
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      jj_consume_token(55);
try {
            Thread.sleep(900);
        } catch (InterruptedException e) {
            System.err.format("IOException: %s%n", e);
        }
        sistema.printOutput(salida);
        {if ("" != null) return true;}
      break;
      }
    case 0:{
      jj_consume_token(0);
{if ("" != null) return false;}
      break;
      }
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public void put() throws ParseException {int f = 1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      jj_consume_token(58);
      f = num();
world.putChips(f); salida = "Command: Put Chips";
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      jj_consume_token(58);
      f = num();
world.putBalloons(f); salida = "Command: Put Balloons";
      break;
      }
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public void get() throws ParseException {int f = 1;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case CHIPS:{
      jj_consume_token(CHIPS);
      jj_consume_token(58);
      f = num();
world.pickChips(f); salida = "Command: Pick Chips";
      break;
      }
    case BALLOONS:{
      jj_consume_token(BALLOONS);
      jj_consume_token(58);
      f = num();
world.grabBalloons(f); salida = "Command: Pick Balloons";
      break;
      }
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
}

  final public int num() throws ParseException, Error {int total = 1;
    jj_consume_token(NUM);
try {
            total = Integer.parseInt(token.image);
        } catch (NumberFormatException ee) {
            {if (true) throw new Error("Number out of bounds: " + token.image + " !!");}
        }
        {if ("" != null) return total;}
    throw new Error("Missing return statement in function");
}

  final public String direction() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case LEFT:{
      t = jj_consume_token(LEFT);
      break;
      }
    case RIGHT:{
      jj_consume_token(RIGHT);
      break;
      }
    case BACK:{
      jj_consume_token(BACK);
{if ("" != null) return t.image;}
      break;
      }
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  final public String orientation() throws ParseException {Token t;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NORTH:{
      t = jj_consume_token(NORTH);
      break;
      }
    case SOUTH:{
      jj_consume_token(SOUTH);
      break;
      }
    case EAST:{
      jj_consume_token(EAST);
      break;
      }
    case WEST:{
      jj_consume_token(WEST);
{if ("" != null) return t.image;}
      break;
      }
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// Agregar la condici√≥n if
  final public void conditional(Console sistema) throws ParseException {
    jj_consume_token(IF);
    jj_consume_token(56);
    condition();
    jj_consume_token(57);
    jj_consume_token(THEN);
    block(sistema);
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ELSE:{
      jj_consume_token(ELSE);
      block(sistema);
      break;
      }
    default:
      jj_la1[9] = jj_gen;
      ;
    }
    jj_consume_token(FI);
salida = "Conditional executed.";
        sistema.printOutput(salida);
}

// Agregar el bucle do...od
  final public void loop(Console sistema) throws ParseException {boolean conditionResult;
    jj_consume_token(DO);
    jj_consume_token(56);
    condition();
    jj_consume_token(57);
    block(sistema);
    jj_consume_token(OD);
while (conditionResult) {
        block(sistema);
        conditionResult = condition();
      }
        salida = "Loop executed.";
        sistema.printOutput(salida);
}

// Agregar la repetici√≥n rep...per
  final public void repeat(Console sistema) throws ParseException {int times;
    jj_consume_token(REP);
    times = num();
    jj_consume_token(TIMES);
    block(sistema);
    jj_consume_token(PER);
for (int i = 0; i < times; i++) {
        block(sistema);
      }
        salida = "Repeated " + times + " times.";
        sistema.printOutput(salida);
}

// Condiciones adicionales
  final public boolean condition() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case ISBLOCKED:{
      jj_consume_token(ISBLOCKED);
      jj_consume_token(QUESTIONMARK);
      jj_consume_token(56);
      direction();
      jj_consume_token(57);
{if ("" != null) return world.isBlocked(t.image);}
      break;
      }
    case ISFACING:{
      jj_consume_token(ISFACING);
      jj_consume_token(QUESTIONMARK);
      jj_consume_token(56);
      orientation();
      jj_consume_token(57);
{if ("" != null) return world.isFacing(t.image);}
      break;
      }
    case ZERO:{
      jj_consume_token(ZERO);
      jj_consume_token(QUESTIONMARK);
      jj_consume_token(56);
      num();
      jj_consume_token(57);
{if ("" != null) return num() == 0;}
      break;
      }
    case NOT:{
      jj_consume_token(NOT);
      jj_consume_token(56);
      condition();
      jj_consume_token(57);
{if ("" != null) return !condition();}
      break;
      }
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

// Implementaci√≥n del comando letGo
  final public void letGo() throws ParseException {int balloons;
    jj_consume_token(LETGO);
    jj_consume_token(56);
    balloons = num();
    jj_consume_token(57);
world.putBalloons(balloons);
        salida = "Command: Let go " + balloons + " balloons.";
}

// Mejora del comando safeExe
  final public void safeExe(Console sistema) throws ParseException {boolean success = true;
    jj_consume_token(SAFEEXE);
    jj_consume_token(56);
    command(sistema);
    jj_consume_token(57);
try {
            if (command(sistema)) {
                salida = "Command executed successfully.";
            } else {
                success = false;
                salida = "Command failed, not executed.";
            }
        } catch (Exception e) {
            success = false;
            salida = "Command caused an error, not executed.";
        }
        sistema.printOutput(salida);
}

// Comando moves mejorado
  final public void moves() throws ParseException {List<String> directions = new LinkedList<>();
    String dir;
    jj_consume_token(MOVES);
    jj_consume_token(56);
    dir = direction();
directions.add(dir);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case 58:{
        ;
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        break label_3;
      }
      jj_consume_token(58);
      dir = direction();
directions.add(dir);
    }
    jj_consume_token(57);
String initialDirection = world.getFacing();
        for (String d : directions) {
            if (d.equalsIgnoreCase("forward")) {
                world.moveForward(1, false);
            } else if (d.equalsIgnoreCase("right")) {
                world.turnRight();
                world.moveForward(1, false);
            } else if (d.equalsIgnoreCase("left")) {
                world.turnLeft();
                world.moveForward(1, false);
            } else if (d.equalsIgnoreCase("backwards")) {
                world.turnBack();
                world.moveForward(1, false);
            }
        }
        world.turnTo(initialDirection);
        salida = "Command: Moves executed.";
}

  final public int value() throws ParseException {int val = 0;
  String varName;
    switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
    case NUM:{
      val = num();
{if ("" != null) return val;}
      break;
      }
    case ID:{
      varName = jj_consume_token(ID);
if (vars.containsKey(varName)) {
        {if ("" != null) return vars.get(varName);}
      } else {
        {if (true) throw new Error("Variable no definida: " + varName);}
      }
      break;
      }
    case SIZE:{
      jj_consume_token(SIZE);
{if ("" != null) return world.getN();}
      break;
      }
    case MYCHIPS:{
      jj_consume_token(MYCHIPS);
{if ("" != null) return world.getMyChips();}
      break;
      }
    case MYBALLOONS:{
      jj_consume_token(MYBALLOONS);
{if ("" != null) return world.getMyBalloons();}
      break;
      }
    case BALLONSHERE:{
      jj_consume_token(BALLONSHERE);
{if ("" != null) return world.countBalloons();}
      break;
      }
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
}

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private int jj_gen;
  final private int[] jj_la1 = new int[13];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
	   jj_la1_init_0();
	   jj_la1_init_1();
	}
	private static void jj_la1_init_0() {
	   jj_la1_0 = new int[] {0x0,0x0,0x1801fe1,0x1801fe0,0x1801fe1,0x0,0x0,0x60040,0x780000,0x0,0x70000000,0x0,0x0,};
	}
	private static void jj_la1_init_1() {
	   jj_la1_1 = new int[] {0x4000000,0x200000,0x1800,0x1800,0x1800,0x60000,0x60000,0x0,0x0,0x4,0x200,0x4000000,0x29e000,};
	}

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
	  this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
	  ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
	 try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
	 jj_input_stream = new SimpleCharStream(stream, 1, 1);
	 token_source = new RobotTokenManager(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
	if (jj_input_stream == null) {
	   jj_input_stream = new SimpleCharStream(stream, 1, 1);
	} else {
	   jj_input_stream.ReInit(stream, 1, 1);
	}
	if (token_source == null) {
 token_source = new RobotTokenManager(jj_input_stream);
	}

	 token_source.ReInit(jj_input_stream);
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
	 token_source = tm;
	 token = new Token();
	 jj_ntk = -1;
	 jj_gen = 0;
	 for (int i = 0; i < 13; i++) jj_la1[i] = -1;
  }

  private Token jj_consume_token(int kind) throws ParseException {
	 Token oldToken;
	 if ((oldToken = token).next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 if (token.kind == kind) {
	   jj_gen++;
	   return token;
	 }
	 token = oldToken;
	 jj_kind = kind;
	 throw generateParseException();
  }


/** Get the next Token. */
  final public Token getNextToken() {
	 if (token.next != null) token = token.next;
	 else token = token.next = token_source.getNextToken();
	 jj_ntk = -1;
	 jj_gen++;
	 return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
	 Token t = token;
	 for (int i = 0; i < index; i++) {
	   if (t.next != null) t = t.next;
	   else t = t.next = token_source.getNextToken();
	 }
	 return t;
  }

  private int jj_ntk_f() {
	 if ((jj_nt=token.next) == null)
	   return (jj_ntk = (token.next=token_source.getNextToken()).kind);
	 else
	   return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;

  /** Generate ParseException. */
  public ParseException generateParseException() {
	 jj_expentries.clear();
	 boolean[] la1tokens = new boolean[59];
	 if (jj_kind >= 0) {
	   la1tokens[jj_kind] = true;
	   jj_kind = -1;
	 }
	 for (int i = 0; i < 13; i++) {
	   if (jj_la1[i] == jj_gen) {
		 for (int j = 0; j < 32; j++) {
		   if ((jj_la1_0[i] & (1<<j)) != 0) {
			 la1tokens[j] = true;
		   }
		   if ((jj_la1_1[i] & (1<<j)) != 0) {
			 la1tokens[32+j] = true;
		   }
		 }
	   }
	 }
	 for (int i = 0; i < 59; i++) {
	   if (la1tokens[i]) {
		 jj_expentry = new int[1];
		 jj_expentry[0] = i;
		 jj_expentries.add(jj_expentry);
	   }
	 }
	 int[][] exptokseq = new int[jj_expentries.size()][];
	 for (int i = 0; i < jj_expentries.size(); i++) {
	   exptokseq[i] = jj_expentries.get(i);
	 }
	 return new ParseException(token, exptokseq, tokenImage);
  }

  private boolean trace_enabled;

/** Trace enabled. */
  final public boolean trace_enabled() {
	 return trace_enabled;
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

}
